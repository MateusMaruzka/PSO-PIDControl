#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 14 20:03:57 2019

@author: Prof. Daniel Cavalcanti Jeronymo - UTFPR
@author: Mateus Maruzka Roncaglio - UTFPR
"""
import numpy as np
import math

def ise(e):
    return np.sum(e**2,axis=1)

def iae(e):
    return np.sum(np.abs(e),axis=1)

def itae(e):
    k = np.arange(len(e))
    return np.dot(np.abs(e),k)

def step_info(t,yout): 
    #t = iter(t1)
    
    print ("OS: %f%s"%((yout.max()/yout[-1]-1)*100,'%'))
    print ("Tr %f"%(t[next(i for i in range(0,len(yout)-1) if yout[i]>yout[-1]*.90)]-t[0]))
    A = abs(yout - 1) < 0.02 # ts
    print("Ts %f"%t[A][0])
    

def step(b, a, Ts = 0.1, tf = 1):
    
    # Pd = P.to_discrete(Ts)  
    # B = Pd.num                  # zeros
    # A = Pd.den                  # poles
    B = b
    A = a
    nb = len(B) - 1             # number of zeros
    na = len(A) - 1             # number of poles

    # Simulation parameters
    # tf = 0.05
    
    slack = np.amax([na, nb]) + 1 # slack for negative time indexing of arrays
    kend = math.ceil(tf/Ts) + 1   # end of simulation in discrete time
    kmax = kend + slack           # total simulation array size
    
    y = np.zeros(kmax)
    u = np.ones(kmax)
    # u[0:slack] = 0
    
    # Simulate
    for k in range(slack, kmax-1):
        #print(len(A[1:]))
        #print(len(y[k-1:k-1-na:-1]))
        y[k] = np.dot(B, np.ones(len(b))) - np.dot(A[1:], y[k-1:k-1-na:-1])

        #y[k] = np.dot(B, u[k-1:k-1-(nb+1):-1]) - np.dot(A[1:], y[k-1:k-1-na:-1])
        
    # ignore empty slack
    y = y[slack:]
    u = u[slack:]
    t = np.arange(0, tf + Ts, Ts)
    
    return y,t

# Plot time response
"""

h(z) = y(z)/u(z) = pol(a)/pol(b)

y(z)*pol(b) = pol(a)*u(z)

a(n)*z^(n) + a(n-1)*z^(n-1) +a(n-2)*z^(n-2) ...

b(n)*z^(n) + b(n-1)*z^(n-1) +b(n-2)*z^(n-2) ...

pol(a)*u(z) = [z^(m) + a(1)*z^(m-1) +a(2)*z^(m-2)  + An ...]*[U(z)]

pol(b)*y(z) = [z^(n) + b(1)*z^(n-1) +b(2)*z^(n-2) + ... +Bn ]*[Y(z)]


[z^(n) + b(1)*z^(n-1) +b(2)*z^(n-2) + ... +Bn ]*[Y(z)] = [z^(m) + a(1)*z^(m-1) +a(2)*z^(m-2)  + An ...]*[U(z)]

y[n] + b1*y[n-1] +b2*y[n-2] + ... + bn = u[z] + a1*y[m-1] + a2*z[m-2] + ... + an

y[n] = u[z] + a1*y[m-1] + a2*z[m-2] + ... + an - b1*y[n-1] +b2*y[n-2] + ... + bn

"""

